using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

[System.Serializable]
public class TileMaterialData
{
    public string tag;          // Tag c·ªßa √¥ (Blue, Red, Yellow, Green, Start)
    public Material material;   // Material t∆∞∆°ng ·ª©ng
}

public class LevelManager : MonoBehaviour
{
    public static LevelManager Instance;

    [Header("Prefab v√† G·ªëc Map")]
    public GameObject tilePrefab;     // Prefab TerrainTile
    public Transform tileParent;      // N∆°i ch·ª©a c√°c √¥ ƒë·∫•t

    [Header("Danh s√°ch Level (ScriptableObject)")]
    public List<LevelDataAsset> levels = new List<LevelDataAsset>();

    [Header("Material cho t·ª´ng lo·∫°i √¥ ƒë·∫•t")]
    public List<TileMaterialData> tileMaterials = new List<TileMaterialData>();

    private List<GameObject> spawnedTiles = new List<GameObject>();
    private int currentLevelIndex = 0;
    private List<GameObject> allCoins = new List<GameObject>();
    private int collectedCoins = 0;
    public GameObject coinPrefab;
    private List<GameObject> spawnedCoins = new();
    private int totalCoins;
    private int coinsCollected;
    public TextMeshProUGUI coinCounterText;
    public TextMeshProUGUI levelText;

    public Button restartLevel;

    private void Start()
    {
        if (restartLevel != null)
        {
            restartLevel.onClick.AddListener(RestartLevel);
        }
    }

    public void OnCoinCollected(Coin coin)
    {
        // TƒÉng s·ªë coin ƒë√£ thu ƒë∆∞·ª£c
        coinsCollected++;

        // C·∫≠p nh·∫≠t UI: hi·ªÉn th·ªã s·ªë coin c√≤n l·∫°i
        int remaining = Mathf.Max(0, totalCoins - coinsCollected);
        if (coinCounterText != null)
            coinCounterText.text = remaining.ToString();

        Debug.Log($"ü™ô Collected coin. Remaining: {remaining}");

        // N·∫øu ƒë√£ thu h·∫øt -> chuy·ªÉn level ti·∫øp theo
        if (remaining <= 0)
        {
            Debug.Log("üéâ Collected all coins! Loading next level...");
            NextLevel();
        }
    }
    public void RegisterCoin(GameObject coin)
    {
        allCoins.Add(coin);
    }

    public void CollectCoin(Coin coin)
    {
        collectedCoins++;
        allCoins.Remove(coin.gameObject);

        if (allCoins.Count == 0)
        {
            Debug.Log("üéâ ƒÇn h·∫øt coin -> Next Level!");
            NextLevel();
        }
    }

    private void Awake()
    {
        Instance = this;
    }


    public void LoadLevel(int index)
    {
        // Clear c≈©
        ClearCurrentLevel();

        LevelDataAsset data = levels[index];

        // Spawn √¥ ƒë·∫•t
        foreach (var tile in data.tiles)
        {
            Vector3 pos = new Vector3(tile.position.x, 0f, tile.position.y);
            GameObject newTile = Instantiate(tilePrefab, pos, Quaternion.identity, tileParent);
            newTile.transform.localPosition = new Vector3(newTile.transform.localPosition.x, 1.05f, newTile.transform.localPosition.z);

            // Set m√†u/tag/dot...
            newTile.tag = tile.tag;
            TerrainTile terrain = newTile.GetComponent<TerrainTile>();
            if (terrain)
            {
                terrain.dotCount = tile.dotCount;
                terrain.GenerateDots();
            }
            // √Åp d·ª•ng material d·ª±a tr√™n tag
            ApplyMaterialByTag(newTile, tile.tag);
            spawnedTiles.Add(newTile);
        }

        // ‚úÖ Spawn coin theo danh s√°ch ri√™ng
        foreach (var coinPos in data.coinPositions)
        {
            Vector3 pos = new Vector3(coinPos.x, 1.5f, coinPos.y);
            GameObject coin = Instantiate(coinPrefab, pos, Quaternion.identity, tileParent);
            spawnedCoins.Add(coin);
        }
        totalCoins = data.coinPositions.Count;
        coinsCollected = 0;

        // C·∫≠p nh·∫≠t UI ƒë·ªìng h·ªì coin v√† t√™n level
        if (coinCounterText != null)
            coinCounterText.text = totalCoins.ToString();
        if (levelText != null)
            levelText.text = data.levelName;

        // ‚úÖ Spawn player theo v·ªã tr√≠ playerStartPos trong LevelData
        var player = FindObjectOfType<GridPlayerMovement>();
        if (player != null)
        {
            Vector3 startPos = new Vector3(data.playerStartPos.x, 2f, data.playerStartPos.y);
            player.transform.position = startPos;
            player.ForceSyncPosition();
            Debug.Log($"‚úÖ Player spawn t·∫°i {startPos} (t·ª´ LevelData)");
        }

        // ‚úÖ C·∫≠p nh·∫≠t currentLevelIndex
        currentLevelIndex = index;
    }


    private void ApplyMaterialByTag(GameObject tileObj, string tag)
    {
        Renderer rend = tileObj.GetComponent<Renderer>();
        if (rend == null)
        {
            Debug.LogWarning($"‚ö† Tile {tileObj.name} kh√¥ng c√≥ Renderer ƒë·ªÉ g√°n material!");
            return;
        }

        // T√¨m trong danh s√°ch
        foreach (var data in tileMaterials)
        {
            if (data.tag == tag && data.material != null)
            {
                rend.material = data.material;
                return;
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y tag t∆∞∆°ng ·ª©ng ‚Üí g√°n m√†u m·∫∑c ƒë·ªãnh
        rend.material.color = Color.gray;
    }

    public void ClearCurrentLevel()
    {
        foreach (var tile in spawnedTiles)
        {
            if (tile != null)
                Destroy(tile);
        }
        spawnedTiles.Clear();
    }

    public void NextLevel()
    {
        int nextIndex = (currentLevelIndex + 1) % levels.Count;
        // üîπ N·∫øu ch∆∞a ƒë·∫°t level cao nh·∫•t -> l∆∞u v√†o DataManager
        if (nextIndex + 1 > DataManager.Ins.GetLevel())
        {
            DataManager.Ins.SaveLevel(nextIndex + 1);
            Debug.Log($"üíæ ƒê√£ l∆∞u level m·ªõi: {nextIndex + 1}");
        }

        LoadLevel(nextIndex);
    }

    public void RestartLevel()
    {
        LoadLevel(currentLevelIndex);
    }
}
